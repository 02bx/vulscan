                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/e6a993fbd5f9a96d7f9e250269edb793-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/84659ac4c1e45bd2d0be562d3fdacb4d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/259297d032f6c2eb68bc8778db0e9ca5/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;presenterForConfluenceLicensed=true" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/05c9783eadef6eaefda0a664f5508375-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/606ed4d0b33417c38ad41c7240fd6541/_/download/contextbatch/css/page,-_super/batch.css?build-number=7201&amp;media=print&amp;presenterForConfluenceLicensed=true" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/af45f723c07cfe9ea790812c17f81a33-CDN/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/c890abc318d78efad182b82f6ccc55df/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true&amp;confluence.view.edit.transition=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7201/3d89a43db3618502ceb73a83aa0af888aa0a285a/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <h1>一、漏洞简介</h1><p>漏洞描述：在一定<span style="color: rgb(74,74,74);">情况下postgresql允许任何ip访问且不需要密码，攻击者可通过未授权访问漏洞控制postgresql数据库</span><span style="color: rgb(74,74,74);">,<span style="color: rgb(74,74,74);">postgresql</span> 默认端口是5432</span></p><p><span style="color: rgb(74,74,74);">漏洞评级：高危</span></p><p><span style="color: rgb(74,74,74);">参考链接：<a href="https://www.postgresql.org/docs/current/static/release-8-4-4.html">https://www.postgresql.org/docs/current/static/release-8-4-4.html</a></span></p><p><br /></p><h1>二、利用条件</h1><p>postgresql 直接对外端口默认是5432，且允许任意ip无密码访问；</p><p><br /></p><h1><span style="color: rgb(74,74,74);">三、漏洞验证</span></h1><p><span style="color: rgb(74,74,74);">脚本：</span></p><p><span style="color: rgb(74,74,74);"><br /></span></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="dc70ae47-d3c4-42b8-a045-62fc40515ed3" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGV9&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#!/usr/bin/env python
#encoding=utf-8

# __author__ test
# __time__ 2018-4-25

import commands
import sys
import re

reload(sys)
sys.setdefaultencoding('utf-8')


		
class  PostgresqlPoc(object):
	"""docstring for  portScanner"""
	vulID = '0'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
	version = '1' #默认为1
	vulDate = '2018-05-16' #漏洞公开的时间,不知道就写今天

	author = 'fanyingjie' #  PoC作者的大名
	createDate = '2018-05-16'# 编写 PoC 的日期
	updateDate = '2018-05-16'# PoC 更新的时间,默认和编写时间一样
	references = []# 漏洞地址来源,0day不用写
	name = 'PostgresqlPoc'# PoC 名称
	appPowerLink = ''# 漏洞厂商主页地址
	appName = 'Postgresql'# 漏洞应用名称
	appVersion = ''# 漏洞影响版本
	vulType = ' Postgresql 未授权访问'#漏洞类型,类型参考见 漏洞类型规范表
	desc = '''
		1. Postgresql 运行时的权限 ps -ef |grep postgres|grep -v grep| awk '{print $1}'
		2. 允许访问的ip  vi /var/lib/pgsql/9.6/data/postgresql.conf
		3. 不需要密码：	vi /var/lib/pgsql/9.6/data/pg_hba.conf
	''' # 漏洞简要描述 
	samples = []# 测试样列,就是用 PoC 测试成功的网站
	install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写



	#验证漏洞
	def verify(self):
		payload="ps -ef |grep postgres|grep -v grep|grep -v python| awk '{print $1}'"
		commandResult=commands.getoutput(payload)
		authority=list(set(commandResult.split("\n")))[0] #redis运行时的权限
		if(commandResult==""):
			return {u"postgres":u"服务器未安装postgres"}
		try:
			
			
			payload="cat /var/lib/pgsql/9.6/data/postgresql.conf"

			ippattern="\\n\s{0,6}listen_addresses\s{0,6}=\s{0,6}'\*'" #是否允许任何人访问
			commandResult=commands.getoutput(payload)
			if("No such file" in commandResult):#没有读取到配置文件
				return {u"postgres":[{u"运行权限":authority,u"配置文件位置":u"未找到"}]}
			ipresult=re.findall(ippattern,commandResult)
			if(len(ipresult)!=0):
				ipresult=u"允许任何人访问"
			else:
				ipresult=u"对访问ip做了限制"



			payload="cat /var/lib/pgsql/9.6/data/pg_hba.conf"			
			commandResult=commands.getoutput(payload)
			if("No such file" in commandResult):#没有读取到配置文件
				return {u"postgrespostgres":[{u"运行权限":authority,u"配置文件位置":u"未找到"}]}
			passpattern="\\n\s{0,6}host\s{0,20}all\s{0,20}all\s{0,20}0\.0\.0\.0/0\s{0,20}trust"
			passresult=re.findall(passpattern,commandResult)
			if(len(passresult)!=0):
				passresult=u"不需要密码"
			else:
				passresult=u"需要密码"
			return {u"postgres":[{u"运行权限":authority,u"访问控制":ipresult,u"密码控制":passresult}]}

		except Exception as e:
			return {u"postgres":u"postgres配置文件未找到,检查出错,请手工检查"}	



a=PostgresqlPoc()
print a.verify()


</pre></td></tr></table><p><span style="color: rgb(74,74,74);"><br /></span></p><h1>四、漏洞修复</h1><p>1.禁止root启动postgresql</p><p>2.修改配置文件postgresql.conf，禁止配置 listen_addresses = '*'</p><p>3.修改配置文件pg_hba.conf，禁止配置host    all             all             0.0.0.0/0               trust</p>
        <p>&nbsp;</p>
    </body>
</html>
