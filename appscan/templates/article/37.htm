                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/689a949132fabc86eace7102316c5470/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/e170a429a3ebc9c551f006bb3a0f6cb3-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/935074d6c663ad510d5b836bbc8ac279/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/e170a429a3ebc9c551f006bb3a0f6cb3-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/935074d6c663ad510d5b836bbc8ac279/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701&amp;media=print" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <p><br /></p><h1><span>一. 漏洞简介</span></h1><p><span><span>漏洞描述：跨域资源共享（CORS ）是一种网络浏览器的技术规范，它为Web服务器定义了一种方式，允许网页从不同的域访问其资源。而这种访问是被同源策略所禁止的。CORS系统定义了一种浏览器和服务器交互的方式来确定是否允许跨域请求。 它是一个妥协，有更大的灵活性，但比起简单地允许所有这些的要求来说更加安全。</span></span></p><p><span><span style="color: rgb(26,26,26);letter-spacing: 0.0px;">漏洞评级：低危</span></span></p><p><span style="color: rgb(38,38,38);"><span>参考连接：<a href="http://www.freebuf.com/articles/web/18493.html">http://www.freebuf.com/articles/web/18493.html</a></span></span></p><p><br /></p><h1>二. 利用条件</h1><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p><p><br /></p><h1 class="prettyprint lang-html prettyprinted">三. 漏洞验证</h1><p>绕过请求中的Origin字段，允许allow之外的域访问该域中的资源。</p><p>1、复杂csrf。传统的csrf都是利用html标签和表单来发送请求。没有办法实现一些复杂步骤的csrf，比如模拟购物，先加购物车，结算，填写信息，等等。比如上传文件。具体可以参考利用csrf上传文件</p><p>2、访问内网敏感资源。这个在一定的条件下是可以实现的。比如内网的服务器配置了</p><pre class="prettyprint lang-cpp prettyprinted"><span class="typ" style="color: teal;">Access</span><span class="pun" style="color: rgb(147,161,161);">-</span><span class="typ" style="color: teal;">Control</span><span class="pun" style="color: rgb(147,161,161);">-</span><span class="typ" style="color: teal;">Allow</span><span class="pun" style="color: rgb(147,161,161);">-</span><span class="typ" style="color: teal;">Origin</span><span class="pun" style="color: rgb(147,161,161);">:</span><span class="pln" style="color: rgb(72,72,76);"> </span><span class="pun" style="color: rgb(147,161,161);">*</span><span class="pln" style="color: rgb(72,72,76);"> </span><span class="pun" style="color: rgb(147,161,161);">允许任何来自任意域的跨域请求</span></pre><p>用户访问恶意网页的时候，执行了到内网服务器192.168.1.123/password.txt的请求，脚本在接收到服务器返回之后，将内容发送到攻击者的服务器上。</p><p>3、交互式xss。参考揭密HTML5带来的攻击手法中讲到的shell of the future工具。通过cors，绕过一些反会话劫持的方法，如HTTP-Only限制的cookie，绑定IP地址的会话ID等，劫持用户会话。</p><p>4、程序猿在写ajax请求的时候，对目标域限制不严。有点类似于url跳转。facebook出现过这样一个案例。javascript通过url里的参数进行ajax请求。通过控制这个参数实现注入攻击。</p><h1>四. 漏洞利用</h1><p><br /></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="df0993bb-4554-43db-826d-11503586297c" data-macro-parameters="language=py" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9cHl9&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#这里存放代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (c) 2014-2015 pocsuite developers (http://seebug.org)
See the file 'docs/COPYING' for copying permission
"""
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req 
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase


class CORSPOC(POCBase):
    vulID = '37'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1' #默认为1
    vulDate = '2018-06-05' #漏洞公开的时间,不知道就写今天

    author = 'wangqi' #  PoC作者的大名
    createDate = '2018-06-05'# 编写 PoC 的日期
    updateDate = '2018-06-05'# PoC 更新的时间,默认和编写时间一样
    references = ''# 漏洞地址来源,0day不用写
    name = 'CORS'# PoC 名称
    appPowerLink = '#'# 漏洞厂商主页地址
    appName = 'http'# 漏洞应用名称
    appVersion = 'all versions'# 漏洞影响版本
    vulType = 'HTTP Request Smuggling'#漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        HTTP CORS 跨域
    ''' # 漏洞简要描述
    samples = []# 测试样列,就是用 PoC 测试成功的网站
    install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    cvss = u"低危" #严重,高危,中危,低危


    #验证漏洞 pocsuite -r http-clear-password.py -u 10.1.5.26 --verify
    def _verify(self):
        #定义返回结果
        result = {}
        from urlparse import urlparse
        #获取漏洞IP
        vul_ip = urlparse(self.url).netloc
        print vul_ip
        origins = ['hack.com', 'hack'+vul_ip, vul_ip+'.hack.com']
        headers = {
                'Origin': 
                '',
                'Cache-Control':
                'no-cache',
                'Cookie':
                'a=b',
                'User-Agent':
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'
            }
        proxies = {
            'http': 'http://127.0.0.1:8080',
            'https':'http://127.0.0.1:8080',
        }
        for origin in origins:
            headers['Origin'] = origin
            try:
                response = req.head(url=self.url, headers=headers, timeout=5, proxies=proxies, allow_redirects=False)
                print response.headers
                if response.headers['Access-Control-Allow-Origin']:
                    if origin == response.headers['Access-Control-Allow-Origin']:
                        result['VerifyInfo'] = {}
                        result['VerifyInfo']['URL'] = self.url
                        result['VerifyInfo']['Payload'] = "Origin: %s" % origin
                        break
                else:
                    result = {}
            except Exception, e:
                print e


        # try:
        #     response = req.get(url=vul_ip,timeout=5) 
        # except Exception, e:
        #     response = ""
        # # print response
        # if response and  response.status_code == 200:
        #     result['VerifyInfo'] = {}
        #     result['VerifyInfo']['URL'] = vul_ip
        #     result['VerifyInfo']['Payload'] = "HTTP"
        # else:
        #     result = {}

        return self.save_output(result)

    #漏洞攻击
    def _attack(self):
        result = {}
        # 攻击代码
        return self._verify()

    def save_output(self, result):
        #判断有无结果并输出
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail()
        return output

register(CORSPOC)


</pre></td></tr></table><p><br /></p><h1>五. 解决方案</h1><pre class="prettyprint lang-html prettyprinted"><span style="color: rgb(26,26,26);">1、严格匹配origin字段；</span></pre><p>2、控制Access-Control-Allow-Credentials，禁止发送cookie</p><pre class="prettyprint lang-html prettyprinted"><br /></pre>
        <p>&nbsp;</p>
    </body>
</html>
